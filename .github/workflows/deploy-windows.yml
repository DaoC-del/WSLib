name: Deploy (Windows self-hosted)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  up:
    # 如你的远端 runner 有自定义标签，把下一行改成：
    # runs-on: [self-hosted, wsbot-remote]
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell

    # 直接把 Secrets 暴露为环境变量，compose 会用到它们
    env:
      ONEBOT_TOKEN: ${{ secrets.ONEBOT_TOKEN }}
      ONEBOT_WS_URL: ws://napcat:3001/?access_token=${{ secrets.ONEBOT_TOKEN }}
      LOG_LEVEL: info

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Diagnostics
        run: |
          Write-Host "User: $(whoami)"
          Write-Host "PSVersion: $($PSVersionTable.PSVersion)"
          docker version
          docker compose version; if ($LASTEXITCODE -ne 0) { docker-compose version }
          Write-Host "Repo root: $(Get-Location)"
          if (Test-Path ".\docker-compose.yml") { Write-Host "Found docker-compose.yml" } else { Write-Warning "docker-compose.yml NOT found" }

      - name: Build & Up (NapCat + wsbot)
        run: |
          # 选择 compose 命令：优先 v1 的 docker-compose；否则用 v2 的 docker compose
          $composeCmd = "docker"
          $composeArgsBase = @("compose")
          if (Get-Command docker-compose -ErrorAction SilentlyContinue) {
            $composeCmd = "docker-compose"
            $composeArgsBase = @()
          } else {
            docker compose version | Out-Null
            if ($LASTEXITCODE -ne 0) { throw "Neither 'docker compose' (v2) nor 'docker-compose' (v1) found in PATH" }
          }

          # 仅拉取 napcat（image 服务）。wsbot 是 build-only，拉取会报非0，故不对它 pull
          & $composeCmd @composeArgsBase "pull" "napcat" 2>$null
          if ($LASTEXITCODE -ne 0) { Write-Warning "compose pull napcat failed（忽略）" }

          # 构建 wsbot（并顺便 --pull 基础镜像）
          & $composeCmd @composeArgsBase "build" "--pull"
          if ($LASTEXITCODE -ne 0) { throw "compose build failed" }

          # 起容器
          & $composeCmd @composeArgsBase "up" "-d"
          if ($LASTEXITCODE -ne 0) { throw "compose up failed" }

      - name: Show status
        if: always()
        run: |
          docker ps -a

          # 再次选择 compose 命令以打印日志
          $composeCmd = "docker"; $composeArgsBase = @("compose")
          if (Get-Command docker-compose -ErrorAction SilentlyContinue) { $composeCmd = "docker-compose"; $composeArgsBase = @() }

          # 打印关键日志（不因出错而失败）
          try { & $composeCmd @composeArgsBase "logs" "-n" "120" "napcat" } catch { Write-Warning $_ }
          try { & $composeCmd @composeArgsBase "logs" "-n" "120" "wsbot" } catch { Write-Warning $_ }
