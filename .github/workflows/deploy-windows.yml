name: Deploy (Windows self-hosted)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  up:
    # 如你的远端 runner 有自定义标签，改成：
    # runs-on: [self-hosted, wsbot-remote]
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell

    # 关键：固定 compose 项目名 + 直接把 Secrets 暴露为环境变量
    env:
      COMPOSE_PROJECT_NAME: wslib
      ONEBOT_TOKEN: ${{ secrets.ONEBOT_TOKEN }}
      ONEBOT_WS_URL: ws://napcat:3001/?access_token=${{ secrets.ONEBOT_TOKEN }}
      LOG_LEVEL: info

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Diagnostics
        run: |
          Write-Host "User: $(whoami)"
          Write-Host "PSVersion: $($PSVersionTable.PSVersion)"
          docker version
          docker compose version; if ($LASTEXITCODE -ne 0) { docker-compose version }
          if (Test-Path ".\docker-compose.yml") { Write-Host "Found docker-compose.yml" } else { Write-Error "docker-compose.yml NOT found" }

      - name: Compose down (clean old stack)
        run: |
          $composeCmd = "docker"; $composeArgsBase = @("compose")
          if (Get-Command docker-compose -ErrorAction SilentlyContinue) { $composeCmd = "docker-compose"; $composeArgsBase = @() }
          try { & $composeCmd @composeArgsBase "down" "--remove-orphans" } catch { Write-Warning $_ }

      - name: Build & Up (NapCat + wsbot)
        run: |
          $ErrorActionPreference = "Stop"
          # 选择 compose 命令（v1 或 v2）
          $composeCmd = "docker"; $composeArgsBase = @("compose")
          if (Get-Command docker-compose -ErrorAction SilentlyContinue) { $composeCmd = "docker-compose"; $composeArgsBase = @() } else { docker compose version | Out-Null }

          # 构建（--pull 会更新基础镜像）
          & $composeCmd @composeArgsBase "build" "--pull"
          if ($LASTEXITCODE -ne 0) { throw "compose build failed" }

          # 启动（强制重建，避免残留）
          & $composeCmd @composeArgsBase "up" "-d" "--force-recreate"
          if ($LASTEXITCODE -ne 0) { throw "compose up failed" }

      - name: Show status & recent logs
        if: always()
        run: |
          docker ps -a
          $composeCmd = "docker"; $composeArgsBase = @("compose")
          if (Get-Command docker-compose -ErrorAction SilentlyContinue) { $composeCmd = "docker-compose"; $composeArgsBase = @() }
          try { & $composeCmd @composeArgsBase "logs" "-n" "120" "napcat" } catch { Write-Warning $_ }
          try { & $composeCmd @composeArgsBase "logs" "-n" "120" "wsbot" } catch { Write-Warning $_ }
